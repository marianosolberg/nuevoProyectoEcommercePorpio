{"ast":null,"code":"//importo todas las acciones como actionTypes\nimport * as actionTypes from \"../constants/cartConst\";\nconst CART_INITIAL_STATE = {\n  cartItems: []\n};\nexport const cartReducer = (state = CART_INITIAL_STATE, action) => {\n  switch (action.type) {\n    case actionTypes.ADD_TO_CART:\n      //item es el que nos llega del action.payload\n      const item = action.payload; //buscamos en el cartItems si el producto que tenemos en el array es igual al item\n      //que  nos llega en el payload\n\n      const existItem = state.cartItems.find(elem => elem.product === item.product);\n      console.log(existItem, \"exxxxxxxxxissss\");\n\n      if (existItem) {\n        return { ...state,\n          cartItems: state.cartItems.map(elem => elem.product === existItem.product ? item : elem)\n        };\n      } else {\n        return { ...state,\n          cartItems: [...state.cartItems, item]\n        };\n      }\n\n    case actionTypes.REMOVE_FROM_CART:\n      return { ...state,\n        cartItems: state.cartItems.filter(elem => elem.product !== action.payload)\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/home/mariano/nuevoEcommerce/front/src/redux/reducers/cartReducers.js"],"names":["actionTypes","CART_INITIAL_STATE","cartItems","cartReducer","state","action","type","ADD_TO_CART","item","payload","existItem","find","elem","product","console","log","map","REMOVE_FROM_CART","filter"],"mappings":"AAAA;AACA,OAAO,KAAKA,WAAZ,MAA6B,wBAA7B;AAEA,MAAMC,kBAAkB,GAAG;AACzBC,EAAAA,SAAS,EAAE;AADc,CAA3B;AAIA,OAAO,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGH,kBAAT,EAA6BI,MAA7B,KAAwC;AACjE,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKN,WAAW,CAACO,WAAjB;AACE;AACA,YAAMC,IAAI,GAAGH,MAAM,CAACI,OAApB,CAFF,CAGE;AACA;;AACA,YAAMC,SAAS,GAAGN,KAAK,CAACF,SAAN,CAAgBS,IAAhB,CACfC,IAAD,IAAUA,IAAI,CAACC,OAAL,KAAiBL,IAAI,CAACK,OADhB,CAAlB;AAGAC,MAAAA,OAAO,CAACC,GAAR,CAAYL,SAAZ,EAAuB,iBAAvB;;AAEA,UAAIA,SAAJ,EAAe;AACb,eAAO,EACL,GAAGN,KADE;AAELF,UAAAA,SAAS,EAAEE,KAAK,CAACF,SAAN,CAAgBc,GAAhB,CAAqBJ,IAAD,IAC7BA,IAAI,CAACC,OAAL,KAAiBH,SAAS,CAACG,OAA3B,GAAqCL,IAArC,GAA4CI,IADnC;AAFN,SAAP;AAMD,OAPD,MAOO;AACL,eAAO,EACL,GAAGR,KADE;AAELF,UAAAA,SAAS,EAAE,CAAC,GAAGE,KAAK,CAACF,SAAV,EAAqBM,IAArB;AAFN,SAAP;AAID;;AACH,SAAKR,WAAW,CAACiB,gBAAjB;AACE,aAAO,EACL,GAAGb,KADE;AAELF,QAAAA,SAAS,EAAEE,KAAK,CAACF,SAAN,CAAgBgB,MAAhB,CACRN,IAAD,IAAUA,IAAI,CAACC,OAAL,KAAiBR,MAAM,CAACI,OADzB;AAFN,OAAP;;AAMF;AACE,aAAOL,KAAP;AAhCJ;AAkCD,CAnCM","sourcesContent":["//importo todas las acciones como actionTypes\nimport * as actionTypes from \"../constants/cartConst\";\n\nconst CART_INITIAL_STATE = {\n  cartItems: [],\n};\n\nexport const cartReducer = (state = CART_INITIAL_STATE, action) => {\n  switch (action.type) {\n    case actionTypes.ADD_TO_CART:\n      //item es el que nos llega del action.payload\n      const item = action.payload;\n      //buscamos en el cartItems si el producto que tenemos en el array es igual al item\n      //que  nos llega en el payload\n      const existItem = state.cartItems.find(\n        (elem) => elem.product === item.product\n      );\n      console.log(existItem, \"exxxxxxxxxissss\");\n\n      if (existItem) {\n        return {\n          ...state,\n          cartItems: state.cartItems.map((elem) =>\n            elem.product === existItem.product ? item : elem\n          ),\n        };\n      } else {\n        return {\n          ...state,\n          cartItems: [...state.cartItems, item],\n        };\n      }\n    case actionTypes.REMOVE_FROM_CART:\n      return {\n        ...state,\n        cartItems: state.cartItems.filter(\n          (elem) => elem.product !== action.payload\n        ),\n      };\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}